{"version":3,"file":"static/js/295.fbbda022.chunk.js","mappings":"2MAGA,MAoBA,EApBsBA,IAA+C,IAA9C,eAAEC,EAAc,qBAAEC,GAAsBF,EAC7D,MAAMG,GAAMC,EAAAA,EAAAA,MAgBZ,OAdAC,EAAAA,EAAAA,YAAU,KAENJ,GACAC,GAC2B,MAA3BD,EAAeK,UACa,MAA5BL,EAAeM,WAEfJ,EAAIK,QACF,CAACP,EAAeK,SAAUL,EAAeM,WACzCJ,EAAIM,UACJ,CAAEC,SAAS,GACZ,GACF,CAACT,EAAgBE,EAAKD,IAElB,IAAI,E,mDCdb,MAAMS,EAAkBA,CAACC,EAAMC,KAE7B,MAAMC,EAAaC,EAAAA,gBACjBC,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAACC,MAAO,CAAEC,SAAUP,EAAMC,MAAOA,MAclD,MADkB,6BAA6BO,KAT7B,wDACiCR,cAAiBA,sFAE5DE,8CAOQ,SAIXO,IAAAA,KAAOC,QAAQC,UAAUC,YAEhCH,IAAAA,KAAOC,QAAQG,aAAa,CAC1BC,cAAe,KACfC,QAAS,KACTC,UAAW,OAGN,MAAMC,EAAY,IAAIR,IAAAA,MAAO,CAClCM,QAAShB,EAAgB,GAAI,QAC7Be,cAAef,EAAgB,GAAI,QACnCmB,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBJ,UAAW,KACXK,WAAY,KACZC,aAAc,OAGHC,EAAoB,IAAId,IAAAA,MAAO,CAC1CM,QAAShB,EAAgB,GAAI,WAC7Be,cAAef,EAAgB,GAAI,WACnCmB,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,EAAG,IACjBJ,UAAW,KACXK,WAAY,KACZC,aAAc,OCMhB,EAtDgBlC,IAKT,IALU,cACfoC,EAAa,eACbnC,EAAc,SACdoC,EAAQ,qBACRnC,GACDF,EACC,MAAMsC,EACJF,EAAcG,OAAS,EACnB,CAACH,EAAc,GAAG9B,SAAU8B,EAAc,GAAG7B,WAC7C,CAAC,UAAW,UAElB,OACEiC,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CACXC,OAAQJ,EACRK,KAAM,EACNzB,MAAO,CAAE0B,OAAQ,OAAQC,MAAO,QAASC,SAAA,EAEzC9B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAS,CACRC,IAAI,qDACJC,YAAY,qCAGdjC,EAAAA,EAAAA,KAACkC,EAAa,CACZjD,eAAgBA,EAChBC,qBAAsBA,IAEvBkC,EACEe,QAAQC,GAA8B,MAAnBA,EAAO9C,UAAwC,MAApB8C,EAAO7C,YACrDJ,KAAI,CAACiD,EAAQC,KAEVrC,EAAAA,EAAAA,KAACsC,EAAAA,EAAM,CAELC,SAAU,CAACH,EAAO9C,SAAU8C,EAAO7C,WACnCiD,KAAMJ,IAAWnD,EAAiBkC,EAAoBN,EACtD4B,cAAe,CACbC,MAAOA,KACLrB,EAASe,EAAO,GAElBN,UAEF9B,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CAAAb,UACJN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACE9B,EAAAA,EAAAA,KAAA,UAAA8B,SAASM,EAAOQ,QAChB5C,EAAAA,EAAAA,KAAA,SAAM,SACCoC,EAAOS,WAbbR,OAmBA,C","sources":["components/MapView/MapController.jsx","assets/MapIcons/mapMarker.js","components/MapView/MapView.jsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useMap } from \"react-leaflet\";\n\nconst MapController = ({ selectedObject, selectedObjectLoaded }) => {\n  const map = useMap();\n\n  useEffect(() => {\n    if (\n      selectedObject &&\n      selectedObjectLoaded &&\n      selectedObject.latitude != null &&\n      selectedObject.longitude != null\n    )\n      map.setView(\n        [selectedObject.latitude, selectedObject.longitude],\n        map.getZoom(),\n        { animate: true }\n      );\n  }, [selectedObject, map, selectedObjectLoaded]);\n\n  return null;\n};\n\nexport default MapController;\n","import React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport L from \"leaflet\";\n\n// Create an image from the MUI icon so we can use it with Leaflet\nconst createIconImage = (size, color) => {\n  // Render the icon as static HTML\n  const iconMarkup = ReactDOMServer.renderToString(\n    <LocationOnIcon style={{ fontSize: size, color: color }} /> // Adjust the color and size as needed\n  );\n\n  // Create an SVG wrapper for the icon markup\n  const svgMarkup = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 24 24\">\n      <foreignObject width=\"100%\" height=\"100%\">\n        ${iconMarkup}\n      </foreignObject>\n    </svg>\n  `;\n\n  // Convert the SVG to a base64-encoded image\n  const svgBase64 = `data:image/svg+xml;base64,${btoa(svgMarkup)}`;\n  return svgBase64;\n};\n\n// Fix Leaflet's default icon paths (this is necessary even when using custom icons)\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: null,\n  iconUrl: null,\n  shadowUrl: null,\n});\n\nexport const MapMarker = new L.Icon({\n  iconUrl: createIconImage(24, \"#d00\"),\n  iconRetinaUrl: createIconImage(48, \"#d00\"),\n  iconSize: [24, 24], // [12, 12],\n  iconAnchor: [12, 24], // [15, 30],\n  popupAnchor: [0, -24],\n  shadowUrl: null,\n  shadowSize: null,\n  shadowAnchor: null,\n});\n\nexport const SelectedMapMarker = new L.Icon({\n  iconUrl: createIconImage(48, \"#FF0000\"),\n  iconRetinaUrl: createIconImage(96, \"#FF0000\"),\n  iconSize: [36, 36], // [24, 24], // Slightly larger size\n  iconAnchor: [18, 36], //[22.5, 45],\n  popupAnchor: [0, 36], //[0, -45],\n  shadowUrl: null,\n  shadowSize: null,\n  shadowAnchor: null,\n});\n","import React from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapController from \"./MapController\";\nimport { SelectedMapMarker, MapMarker } from \"../../assets/MapIcons/mapMarker\";\n\nconst MapView = ({\n  domainObjects,\n  selectedObject,\n  onSelect,\n  selectedObjectLoaded,\n}) => {\n  const initialPosition =\n    domainObjects.length > 0\n      ? [domainObjects[0].latitude, domainObjects[0].longitude]\n      : [46.603354, 1.888334];\n\n  return (\n    <MapContainer\n      center={initialPosition}\n      zoom={6}\n      style={{ height: \"100%\", width: \"100%\" }}\n    >\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution=\"&copy; OpenStreetMap contributors\"\n      />\n\n      <MapController\n        selectedObject={selectedObject}\n        selectedObjectLoaded={selectedObjectLoaded}\n      />\n      {domainObjects\n        .filter((object) => object.latitude != null && object.longitude != null)\n        .map((object, index) => {\n          return (\n            <Marker\n              key={index}\n              position={[object.latitude, object.longitude]}\n              icon={object === selectedObject ? SelectedMapMarker : MapMarker}\n              eventHandlers={{\n                click: () => {\n                  onSelect(object);\n                },\n              }}\n            >\n              <Popup>\n                <div>\n                  <strong>{object.name}</strong>\n                  <br />\n                  City: {object.city}\n                </div>\n              </Popup>\n            </Marker>\n          );\n        })}\n    </MapContainer>\n  );\n};\n\nexport default MapView;\n"],"names":["_ref","selectedObject","selectedObjectLoaded","map","useMap","useEffect","latitude","longitude","setView","getZoom","animate","createIconImage","size","color","iconMarkup","ReactDOMServer","_jsx","LocationOnIcon","style","fontSize","btoa","L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","MapMarker","iconSize","iconAnchor","popupAnchor","shadowSize","shadowAnchor","SelectedMapMarker","domainObjects","onSelect","initialPosition","length","_jsxs","MapContainer","center","zoom","height","width","children","TileLayer","url","attribution","MapController","filter","object","index","Marker","position","icon","eventHandlers","click","Popup","name","city"],"sourceRoot":""}